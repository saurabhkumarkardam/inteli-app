##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This playbook manages user certificates for peers using existing Fabric-CA deployment on k8s
# It creates new user identities or updates them
# The Kubernetes clusters should already be created and the infomation to connect to the
# clusters be updated in the network-user-certificate.yaml file that is used as an input to this playbook
###########################################################################################
# To Run this playbook from this directory, use the following command 
# (network-user-certificate.yaml also in this directory)
# ansible-playbook manage-user-certificate.yaml -e "@./network-user-certificate.yaml"
############################################################################################

---
  # This will apply to ansible_provisioners. /etc/ansible/hosts should be configured with this group
- hosts: ansible_provisioners
  gather_facts: no
  tasks:
    # Check if CA server is available
    - name: "Checking if CA server exists in {{ item.name | lower }}-net"
      include_role:
        name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
      vars:
        component_name: "{{ component_services.ca.name }}"
        component: "{{ item.name | lower}}"
        component_type: "Pod"
        component_services: "{{ item.services }}"
        namespace: "{{ item.name | lower }}-net"
        kubernetes: "{{ item.k8s }}"
        label_selectors:
          - name = {{ component_name }}
        vault: "{{ item.vault }}"
        ca: "{{ item.services.ca }}"
      loop: "{{ network['organizations'] }}"

    # Check if CA CLI is available
    - name: "Checking if CA CLI exists in {{ item.name | lower }}-net"
      include_role:
        name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
      vars:
        component_name: "{{ component_services.ca.name }}-tools"
        component: "{{ item.name | lower}}"
        component_type: "Pod"
        component_services: "{{ item.services }}"
        namespace: "{{ item.name | lower }}-net"
        kubernetes: "{{ item.k8s }}"
        label_selectors:
          - name = {{ component_name }}
        vault: "{{ item.vault }}"
        ca: "{{ item.services.ca }}"
      loop: "{{ network['organizations'] }}"

    ############################################################################################
    # This task generates the crypto material by running the ca_tools/peer playbook
    - name: Generate crypto material for user
      include_role:
        name: "create/ca_tools/peer"
      vars:
        component_name: "{{ item.name | lower}}-net"
        component: "{{ item.name | lower}}"
        component_type: "{{ item.type | lower}}"
        component_services: "{{ item.services }}"
        orderer_org: "{{ item.orderer_org | lower }}"
        sc_name: "{{ component }}-bevel-storageclass"
        kubernetes: "{{ item.k8s }}"
        vault: "{{ item.vault }}"
        ca: "{{ item.services.ca }}"
        docker_url: "{{ network.docker.url }}"
        gitops: "{{ item.gitops }}"
        values_dir: "{{ playbook_dir }}/../../../{{ item.gitops.release_dir }}/{{ item.name | lower }}"
      loop: "{{ network['organizations'] }}"
      when: item.type == 'peer'

  vars: #These variables can be overriden from the command line
    privilege_escalate: false           #Default to NOT escalate to root privledges
    install_os: "linux"                 #Default to linux OS
    install_arch:  "amd64"              #Default to amd64 architecture
    refresh_user_cert: 'true'                #Default for this playbook is true
    bin_install_dir:  "~/bin"            #Default to ~/bin install directory for binaries
    add_new_org: "false"
